#include "../UTIL.SISA"

#define OFFSET_CMD 0x7040 

init:
    CLIR, sp, STACK_START; // incializar stack pointer
    
start:
    
    CLIR, arg0, ENC_HDR_AES_KEY;
    CLIR, t0, 0xCDEF;
    CLIR, t1, 0x89AB;
    SLLI, t1, t1, 16;
    CLIR, t2, 0x4567;
    CLIR, t3, 0x0123;
    SLLI, t3, t3, 16;
    OR, t0, t0, t1;
    OR, t2, t2, t3;
    STM, t0, arg0, 0;
    STM, t2, arg0, 4;
    STM, t0, arg0, 8;
    STM, t2, arg0, 12;
    
    CLIR, t4, 0;
    STM, t4, zero, ENC_HDR_OP; // forzar encripcion
    CLIR, t0, 0x4; 
    STM, t0, zero, ENC_HDR_BLOCKS; // solo desencriptar 2 bloques 
    /////// HASTA AQUI SOLO PARA SIMUL
    
    STM, zero, zero, ENC_HDR_STATUS; 
    // iniciar clk counter
    CLIR, g0, CSR_SCRATCH_START;
    CLIR, arg0, CSR_CYCLEL;
    CLIR, arg1, CSR_CYCLEH;
    call, read_64bit_cnt;
    STM, arg0, g0, 0x10;
    STM, arg1, g0, 0x14;

    // Iniciar el instruction counter
    CLIR, arg0, CSR_COMPLETED_INSTRL;
    CLIR, arg1, CSR_COMPLETED_INSTRH;
    call, read_64bit_cnt;
    STM, arg0, g0, 0x18;
    STM, arg1, g0, 0x1c;


    // key expansion
    CLIR, arg0, ENC_HDR_AES_KEY;
    call, key_expansion;

    LDM, t0, zero, ENC_HDR_OP; // se puede porque imm es de 15 bits, signo extendido
    CLIR, t2, UART_BASE;
    CLIR, arg0, RAM_BASE;
    LDM, arg1, zero, ENC_HDR_BLOCKS;
    JINE, t0, zero, call_decrypt;
    call, encrypt;
    JMP, after_encrypt;
call_decrypt:
    //JMP, encrypt;
    call, decrypt;
after_encrypt:
    // termina clk counter
    CLIR, g0, CSR_SCRATCH_START;
    CLIR, arg0, CSR_CYCLEL;
    CLIR, arg1, CSR_CYCLEH;
    call, read_64bit_cnt;
    STM, arg0, g0, 0x20;
    STM, arg1, g0, 0x24;

    // termina el instruction counter
    CLIR, arg0, CSR_COMPLETED_INSTRL;
    CLIR, arg1, CSR_COMPLETED_INSTRH;
    call, read_64bit_cnt;
    STM, arg0, g0, 0x28;
    STM, arg1, g0, 0x2c;

    CLIR, g1, 2;
    STM, g1, zero, ENC_HDR_STATUS; // Decir que status OK

    JMP,end;

/* Lee counter de 64 bits
args:
    - arg0 puntero a low word
    - arg1 puntero a high word
ret:
    - arg0 low word 
    - arg1 high word 
*/
read_64bit_cnt:
    read_64bit_cnt_loop:
        LDM, t1, arg1, 0;
        LDM, t0, arg0, 0;
        LDM, t2, arg1, 0;
        JINE, t1, t2, read_64bit_cnt_loop; // si high cambio, tengo que volver a leer
    MOV(arg0, t0);
    MOV(arg1, t1);
    JBA;

/* Cifrado
args:
    - arg0 puntero a datos
    - arg1 bloques 
ret:
    - arg0 basura
    - arg1 basura
*/
encrypt: 
    PUSH(lr)
    CLIR, t3, 'E';
    STM, t3, t2, 0;

    CLIR, g0, 0;
    MOV(g1, arg1);
    encrypt_loop:
        call, encrypt_block; // falta ciclo de bloques
        SUMI, arg0, arg0, 16; // moverse a siguiente bloque 
        SUMI, g0, g0, 1;
        JILT, g0, g1, encrypt_loop;
    POP(lr)
    JBA;

/* Ejecuta el cifrado de bloque
args:
    - arg0 puntero al bloque a encriptar
ret:
    - arg0 puntero a bloque encriptado
*/
encrypt_block:
    CLIR, t0, ENC_HDR_AES_KEY; // puntero al key store

    LDV, v0, arg0, 0; // cargar estado
    LDV, v1, t0, 0; // cargar round_key
    VXOR, v0, v0, v1; // add roundkey

    CLIR, t1, 1; // indice loop
    CLIR, t2, 10; //max iter LT
    encrypt_block_loop:
        SUMI, t0, t0, 16; // aumentar puntero de roundkey
        LDV, v1, t0, 0; // cargar roundkey para esta ronda
        VAES_SUB, v0, v0, zero; //sub bytes
        VAES_SHIFT, v0, v0, zero; // shift rows 
        VAES_MIX, v0, v0, zero; // mix colums en inmediatamente add roundkey
        VXOR, v0, v0, v1;

        SUMI, t1, t1, 1;
        JILT, t1, t2, encrypt_block_loop;
    
    // ronda final
    SUMI, t0, t0, 16; // aumentar puntero de roundkey
    LDV, v1, t0, 0; // cargar roundkey para esta ronda
    VAES_SUB, v0, v0, zero; //sub bytes
    VAES_SHIFT, v0, v0, zero; // shift rows y add roundkey final
    VXOR, v0, v0, v1; // shift rows y add roundkey final
    STV, v0, arg0, 0;
    JBA;

/* Descifrado
args:
    - arg0 puntero a datos
    - arg1 bloques 
ret:
    - arg0 basura
    - arg1 basura
*/
decrypt:   
    PUSH(lr);
    CLIR, t3, 'D';
    STM, t3, t2, 0;

    CLIR, g0, 0;
    MOV(g1, arg1);
    decrypt_loop:
        call, decrypt_block; // falta ciclo de bloques
        SUMI, arg0, arg0, 16; // moverse a siguiente bloque 
        SUMI, g0, g0, 1;
        JILT, g0, g1, decrypt_loop;
    
    POP(lr)
    JMP, end;

/* Ejecuta el descifrado de bloque 
args:
    - arg0 puntero al bloque a encriptar
ret:
    - arg0 puntero a bloque encriptado
*/
decrypt_block:
    CLIR, t0, ENC_HDR_AES_KEY; // puntero al key store
    SUMI, t0, t0, 160; // apuntar a última llave

    LDV, v0, arg0, 0; // cargar estado
    LDV, v1, t0, 0; // cargar round_key
    VXOR, v0, v0, v1; // add roundkey

    CLIR, t1, 1; // indice loop
    CLIR, t2, 10; //max iter LT
    decrypt_block_loop:
        DIFI, t0, t0, 16; // decrementar puntero de roundkey
        LDV, v1, t0, 0; // cargar roundkey para esta ronda
        VAES_ISHIFT, v0, v0, zero; // shift rows 
        VAES_ISUB, v0, v0, zero; //sub bytes
        VXOR, v0, v0, v1; // add roundkey
        VAES_IMIX, v0, v0, zero; // mix colums en inmediatamente add roundkey

        SUMI, t1, t1, 1;
        JILT, t1, t2, decrypt_block_loop;
    
    // ronda final
    DIFI, t0, t0, 16; // decrementar puntero de roundkey
    LDV, v1, t0, 0; // cargar roundkey para esta ronda
    VAES_ISHIFT, v0, v0, zero; // shift rows y add roundkey final
    VAES_ISUB, v0, v0, zero; //sub bytes
    VXOR, v0, v0, v1; //add roundkey final
    STV, v0, arg0, 0;
    JBA;


end:
   END_SIMUL;
   CLIR, t0, OFFSET_CMD;
   LDM, t1, t0, 0;
   CLIR, t2, 0xDEDE;
   JIEQ, t1, t2, jump_to_rom;
   JMP, end;
jump_to_rom:
   JLRL, zero, zero, 0; // devolverse a ROM 


/* Obtiene el valor de rcon para una ronda
args: 
    - arg0: # de ronda de key expansion empieza en 0
ret:
    - arg0: valor de rcon
*/
get_rcon:
    CLIR, t0, 0x01; // valor rcon ronda 0
    CLIR, t1, 0x100; // valor que se debe reemplazar por 1B
    CLIR, t2, 0x1B;
    SLL, arg0, t0, arg0;
    JILT, arg0, t1, get_rcon_end;
    get_rcon_gt_0x100:
        // Obtener cuantos shifts a la izquierda se necesitan
        SLRI, t3, arg0, 9;
        SLL, arg0, t2, t3; // 0x1B << t3
    get_rcon_end:
    JBA;

/* Ejecuta la expansion de llaves
args:
    - arg0 dirección del key store, con la primera llave ya cargada
ret:
    - arg0 valor inicial
*/
key_expansion:
    PUSH(lr)
    PUSH(arg0)
    PUSH(g0)
    PUSH(g1)
    PUSH(g2)
    
    CLIR, g0, 0; // indice de llave generada
    CLIR, g1, 10; // max indice
    MOV(g2, arg0); // puntero al key store

    key_expansion_loop:
        LDV, v0, g2, 0;// cargar llave anterior 
        LDM, v1, g2, 12; // cargar w3 en las 4 palabras de v1 
        
        CLIR, t4, 8; // interpret vectorial es 8 en todas las palabras
        VROT32, v1, v1, t4; // rotword 8 bits a la derecha
        VAES_SUB, v1, v1, zero; // subword
        // obtener rcon 
        MOV(arg0, g0);
        call, get_rcon; // rcon está en arg0
        VXOR, v1, v1, arg0; // aplicar rcon
        VAES_WXOR, v2, v0, v1; // generar llave de próxima ronda 
        
        SUMI, g2, g2, 16; // aumentar puntero de llave
        STV, v2, g2, 0; // guardar nueva llave

        SUMI, g0, g0, 1;
        JILT, g0, g1, key_expansion_loop; 


    POP(g2)
    POP(g1)
    POP(g0)
    POP(arg0)
    POP(lr)
    JBA;
